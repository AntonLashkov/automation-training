name: Coverage
on:
  workflow_dispatch:
    inputs:
      assignees:
        required: false
        description: Comma-separated list of assignee to assign in fail test issue
      issue_prefix:
        required: false
        description: An issue prefix to create
      labels:
        required: false
        description: Comma-separated list of labels to add
      issue_number:
        required: false
        description: Id(number) ussue to update


jobs:
  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.GITHUB_REF }}
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '16.x'

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Salesforce CLI
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          npm install sfdx-cli@7.94.3
          node_modules/sfdx-cli/bin/run --version
          node_modules/sfdx-cli/bin/run plugins --core

      - name: Authenticate DevHub
        run: |
          echo "${SALESFORCE_JWT_SECRET_KEY}" > server.key
          node_modules/sfdx-cli/bin/run force:auth:jwt:grant --clientid ${{ secrets.SUMO_PROD_CONSUMER_KEY }} --jwtkeyfile server.key --username ${{ secrets.SUMO_PROD_USERNAME }} --setdefaultdevhubusername -a devhub
        env:
          SALESFORCE_JWT_SECRET_KEY: ${{ secrets.SUMO_PROD_JWT_SECRET_KEY }}

      - name: Create scratch org
        run: node_modules/sfdx-cli/bin/run force:org:create -v devhub -s -f config/scratch/developer-org-def.template.json -a test-org -d 1

      - name: Deploy source
        run: node_modules/sfdx-cli/bin/run force:source:push -u test-org

      - name: Assign permset for tests (TEMPORARY)
        run: node_modules/sfdx-cli/bin/run force:user:permset:assign -n SUMOAdminPermissions -u test-org

      - name: Run Apex test
        continue-on-error: true
        run: |
          mkdir test-results
          SFDX_IMPROVED_CODE_COVERAGE=true node_modules/sfdx-cli/bin/run force:apex:test:run -r json -c -u test-org -w 60 --json -d test-results

      - name: Get test run summary
        id: result
        uses: actions/github-script@v3
        with:
          script: |
            const issue_number = context.payload.inputs.issue_number;
            const fs = require('fs')
            const path = require('path')
            const testRunId = await fs.promises.readFile(path.resolve('test-results', 'test-run-id.txt'), 'utf8')
            const result = JSON.parse(await fs.promises.readFile(path.resolve('test-results', `test-result-${testRunId}.json`), 'utf8'))

            console.log('------------SUMMARY--------------')
            console.log(result.summary)
            const code = '```';
            const summary = `### Summary\n${code}javascript\n${JSON.stringify(result.summary, null, '  ')}\n${code}`

            console.log('--------LOW CLASS COVERAGE----------')
            const MIN_COVERAGE_PRECENT = 85
            const coverageHeaders = '#|Class Name|Total Lines|Total Covered|Covered Percent\n--- | --- | --- | --- | ---'
            const coverageBody = result.coverage.coverage.filter((item) => item.coveredPercent < MIN_COVERAGE_PRECENT).map((item, index) => `${(index + 1)}.|${item.name}|${item.totalLines}|${item.totalCovered}|${item.coveredPercent}%`).join('\n')
            const coverage = `${coverageHeaders}\n${coverageBody}`
            console.log(coverage)

            let body = `Auto-generated message by ${context.workflow}(${context.eventName}).\n\n${summary}\n\n### Low Coverage Classes:\n${coverage}`
            const logUrl = `${context.payload.repository.html_url}/actions/runs/${process.env.GITHUB_RUN_ID}`
            if ((result.summary.failing > 0) || (parseInt(result.summary.testRunCoverage) < MIN_COVERAGE_PRECENT)) {
              console.log('------------FAILS--------------')
              const fails = result.tests.filter(test => test.Outcome === 'Fail')
              fails.forEach(test => {
                console.group(`Method: ${test.FullName}`);
                console.group(`Trace:\n${test.StackTrace}`);
                console.groupEnd();
                console.log(`Message: ${test.Message}`);
                console.groupEnd();
              })
              const issueFails = fails.map(test =>
                `<details>
                  <summary>${test.FullName}</summary>
                  <p><b>Message:</b>\n\n${code}\n${test.Message}\n${code}\n\n</p>
                  <p><b>Stack Trace:</b>\n\n${code}\n${test.StackTrace}\n${code}\n\n</p>
                </details>`
              ).join('\n')

              if (fails.length) {
                body = `${body}\n\n### Fails:\n${issueFails}`
              }

              const request = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `${body}\n\n### [Details](${logUrl})`,
              }

              if (issue_number) {
                await github.issues.createComment({ ...request, issue_number })
              } else {
                const issue = await github.issues.create({
                  ...request,
                  title: `[${context.payload.inputs.issue_prefix || 'Test Coverage'}]: Fix tests in branch "${context.ref}".`,
                  assignees: (context.payload.inputs.assignees || context.actor).split(','),
                  labels: ['automation', 'development', 'bug'].concat((context.payload.inputs.labels || '').split(',')).filter((e,i,a) => e && a.indexOf(e) === i)
                })
              }

            } else if (issue_number) {
              const request = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number
              }

              // update comment with success response
              await github.issues.createComment({
                ...request,
                body: `${body}\n\n### [Details](${logUrl})`
              })
              // close issue
              await github.issues.update({
                ...request,
                state: 'closed'
              })
            }


      - name: Delete scratch org
        if: always()
        run: node_modules/sfdx-cli/bin/run force:org:delete -u test-org --noprompt